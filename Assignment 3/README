Program 1:

rsa = RSA(k=1024)
public_key = rsa.get_public_key()

ciphertext = rsa.encrypt(b"Hello World")
plaintext = rsa.decrypt(ciphertext)

print(plaintext.decode('utf-8'))

run the program in sagemath terminal by executing the following command:
load("RSA.py")

Note:
1. If the message is too long the program terminates and gives a value error.

Program 2:

elg = ElGamal(51,356946343358715584277268939833200898638115523809875957978296404324882635483239652693185396510297393318766806270336708224092728306993230856774545615633749902372048048265678686975662568763138587679678543730494365670031920127769412328695198054176711730984373627043994772365720336206479390798908230342619)
public_key = elg.get_public_key()

ciphertext = elg.encrypt(b"hello world")

print(elg.decrypt(ciphertext).decode())

run the program in sagemath terminal by executing the following command:
load("ElGamal.py")

Note:
1. If the message is too long the program terminates and gives a value error.
2. p is set very large to accommodate for larger messages

Program 3:

p = Paillier(k=1024)

public_key = p.get_public_key()

ciphertext = p.encrypt(b"Hello")
plaintext = p.decrypt(ciphertext)

print(f"Plaintext : {plaintext.decode('utf-8')}")

run the program in sagemath terminal by executing the following command:
load("Paillier.py")

Note:
1. If the message is too long the program terminates and gives a value error.
